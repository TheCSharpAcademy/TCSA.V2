@page "/dashboard/peer-reviews"
@layout DashboardLayout
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
@using TCSA.V2.Components.Dashboard.Shared
@using TCSA.V2.Components.UI.SVGs
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Services

<div class="mt-md-5 pt-md-3">
    @if (userAssigned)
    {
        <CloseButtonSVG OnClickCallback="@DismissUserAssigned" />
        <div class="card card-success">
            <div class="card-body card-body-success">
                You have been assigned to the issue. Don't forget to assign yourself to the issue on Github as well if you haven't yet. <a class="article-link" href="article/57/review-guidelines" target="_blank">Please read this article</a> for a comprehensive code review tutorial.
            </div>
        </div>
    }

    @if (userReleased)
    {
        <CloseButtonSVG OnClickCallback="@DismissUserReleased" />
        <div class="card card-success">
            <div class="card-body card-body-success">
                You have been releaved from the issue. Don't forget to unassign yourself from the issue on Github as well <a class="article-link" href="article/57/review-guidelines" target="_blank">Please read this article</a> for a comprehensive code review tutorial.
            </div>
        </div>
    }

    @if (projectCompleted)
    {
        <CloseButtonSVG OnClickCallback="@DismissProjectCompleted" />
        <div class="horizontal-card card-success">
            <div class="card-body card-body-success">
                The project was successfuly marked as complete.
            </div>
        </div>
    }

    @if (availableProjects != null)
    {
        <div class="row">
            @foreach (var project in availableProjects)
            {
                <div class="col-md-6">
                    <DashboardReviewCard Status="@(@CheckIfAssigned(project.Id) ? "is-assigned" : "")"
                                         Title=@GetProject(project.ProjectId).Title
                                         Name=@GetName(project.AppUserId)
                                         IconUrl=@GetProject(project.ProjectId).IconUrl
                                         ProjectId=@GetProject(project.ProjectId).Id
                                         ProjectSlug=@GetProject(project.ProjectId).Slug
                                         ExperiencePoints=@GetProject(project.ProjectId).ExperiencePoints
                                         GithubUrl=@project.GithubUrl
                                         OnAssignCallBack="@(() => AssignMyself(project.Id))"
                                         OnMarkAsCompleteCallBack="@(() => MarkAsComplete(project.Id, project.AppUserId))"
                                         OnReleaseAssignmentCallBack="@(()=> ReleaseAssignment(project.Id))"/>
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter] public EventCallback OnClickCallback { get; set; }

    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    [Inject] private IUserService UserService { get; set; }
    [Inject] private IPeerReviewService PeerReviewService { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }

    private List<Project>? projects;
    private List<DashboardProject> availableProjects;
    private ApplicationUser User;

    private string userId = "";
    private bool userAssigned = false;
    private bool projectCompleted = false;
    private bool userReleased = false;

    protected override async Task OnInitializedAsync()
    {
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        }

        projects = ProjectHelper.GetProjects();

        var claims = AuthSate.User;
        userId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

        User = await PeerReviewService.GetUserForPeerReview(userId);

        availableProjects = await PeerReviewService.GetProjectsForPeerReview(userId);
    }

    private Project GetProject(int id)
    {
        return projects.Single(x => x.Id == id);
    }

    private string GetName(string id)
    {
        return PeerReviewService.GetRevieweeName(id);
    }

    private async Task MarkAsComplete(int dashboardProjectId, string id)
    {
        await PeerReviewService.MarkCodeReviewAsCompleted(userId, dashboardProjectId, id);

        projectCompleted = true;

        availableProjects = await PeerReviewService.GetProjectsForPeerReview(userId);

        User = await PeerReviewService.GetUserForPeerReview(userId);
    }

    private async Task AssignMyself(int id)
    {
        await PeerReviewService.AssignUserToCodeReview(userId, id);
        User = await PeerReviewService.GetUserForPeerReview(userId);

        userAssigned = true;

        availableProjects = await PeerReviewService.GetProjectsForPeerReview(userId);
    }

    private async Task ReleaseAssignment(int id)
    {
        await PeerReviewService.ReleaseUserFromCodeReview(userId, id);
        User = await PeerReviewService.GetUserForPeerReview(userId);
        userReleased = true;
        availableProjects = await PeerReviewService.GetProjectsForPeerReview(userId);
    }

    private bool CheckIfAssigned(int id)
    {
        return User?.CodeReviewProjects?.Any(x => x.DashboardProjectId == id) ?? false;
    }

    private void DismissUserAssigned() => userAssigned = false;
    private void DismissUserReleased() => userReleased = false;
    private void DismissProjectCompleted() => projectCompleted = false;
}

<style>
    .modal-dialog {
        margin-top: 100px;
        max-width: 750px;
    }

    .article-link {
        color: black;
        font-weight: 600;
        text-decoration: underline;
    }
</style>