@page "/dashboard/community"
@layout DashboardLayout
@rendermode InteractiveServer

@using System.Security.Claims;
@using TCSA.V2.Components.Dashboard.Shared
@using TCSA.V2.Components.UI
@using TCSA.V2.Components.UI.SVGs
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.FormModels
@using TCSA.V2.Models.Forms
@using TCSA.V2.Services

<PageTitle>@StringConstants.PageTitle - Community Projects</PageTitle>

<div class="mt-md-5 pt-md-5">
    @if (user == null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="row">
            @if (createIssue)
            {
                <div class="col horizontal-card submit-project-card shadow rounded-sm">
                    <CloseButtonSVG OnClickCallback="@ToggleSubmitIssue" />

                    <div class="form-group">
                        <EditForm Model="@submitIssueForm" OnValidSubmit="SubmitIssue">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-floating mb-3">
                                <InputSelect shadow rounded @bind-Value="submitIssueForm.CommunityProjectId" class="form-select" id="projectSelect">
                                    <option value="87">The C# Academy V2</option>
                                    <option value="54">Point Of Sale</option>
                                </InputSelect>
                                <label for="projectSelect">Select Project</label>
                            </div>

                            <div class="form-floating mb-3">
                                <InputSelect shadow rounded @bind-Value="submitIssueForm.Type" class="form-select" id="issueTypeSelect">
                                    <option value="">Select Issue Type</option>
                                    @foreach (var enumValue in Enum.GetValues(typeof(IssueType)))
                                    {
                                        <option value="@enumValue">@enumValue.ToString()</option>
                                    }
                                </InputSelect>
                                <label for="issueTypeSelect">Issue Type</label>
                            </div>

                            <div class="form-floating mb-3">
                                <InputText class="form-control" @bind-Value="submitIssueForm.Title" id="issueTitle" />
                                <label for="issueTitle">Issue Title</label>
                            </div>

                            <div class="form-floating mb-3">
                                <InputText class="form-control" @bind-Value="submitIssueForm.GithubUrl" id="issueUrl" />
                                <label for="issueUrl">Issue Url</label>
                            </div>
                            @if (isSubmittingIssue)
                            {
                                <LoadingSpinner />
                            } else
                            {
                                <button class="btn btn-outline-secondary mb-3" type="submit">Submit</button>
                            }
                        </EditForm>
                    </div>
                </div>
            }
            else
            {
                <button class="btn btn-success" @onclick=ToggleSubmitIssue>Create Issue</button>
            }
            @if (projectSubmitted)
            {
                <CloseButtonSVG OnClickCallback="@DismissProjectSubmitted" />
                <div class="horizontal-card card-success">
                    <div class="card-body card-body-success">
                        Your project has been submitted for review.
                    </div>
                </div>
            }

            @if (userAssigned)
            {
                <CloseButtonSVG OnClickCallback="@DismissUserAssigned" />
                <div class="horizontal-card card-success">
                    <div class="card-body card-body-success">
                        You have been assigned to the issue. Don't forget to assign yourself to the issue on Github as well if you haven't yet.
                    </div>
                </div>
            }

            @if (submitProject)
            {
                <div class="col horizontal-card submit-project-card shadow rounded-sm">
                    <CloseButtonSVG OnClickCallback="@CloseSubmitProjectForm" />

                    <div class="form-group">
                        <EditForm Model="@form" OnValidSubmit="SubmitProject">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <InputNumber hidden shadow rounded @bind-Value="form.ProjectId" class="form-select">
                                <option selected>Open this select menu</option>
                            </InputNumber>
                           <div class="container justify-content-center text-center" style="font-size:1.3rem">                               
                                    <a target="blank" href="article/52/code-reviews" >Pull Request Url</a>
                                    <InputText class="form-control" @bind-Value="form.GithubUrl" />
                            </div>
                            
                           <div class="d-flex justify-content-center">
                                <button class="btn btn-outline-warning" type="submit">Submit</button>
                           </div>
                            <br />
                        </EditForm>
                    </div>
                </div>
            }
        </div>
        <div class="row">
            <div class="col-12 col-sm-6 issues-col">
                <DashboardProjectCard Project="@PointOfSale" />
                @if (issuesToShow != null)
                {
                    foreach (var issue in issuesToShow.Where(x => x.CommunityProjectId == 54))
                    {
                        <DashboardIssueCard Status=@(issue.AppUserId == userId ? "is-assigned" : "")
                                            Issue="issue"
                                            Title="Bolotas"
                                            IsAssigned=@(issue.AppUserId == userId)
                                            IsPendingReview="@CheckIfPendingReview(issue.ProjectId)"
                                            OnAssignCallBack="@(() => AssignMyself(issue))"
                                            OnSubmitPullRequestCallBack="@(() => OpenSubmitProjectform(issue.ProjectId))" />
                    }
                }
            </div>
            <div class="col-12 col-sm-6 issues-col">
                <DashboardProjectCard Project="@AcademyV2" />
                @if (issuesToShow != null)
                {
                    foreach (var issue in issuesToShow.Where(x => x.CommunityProjectId == 87))
                    {
                        <DashboardIssueCard Status=@(issue.AppUserId == userId ? "is-assigned" : "")
                                            Issue="issue"
                                            Title="Bolotas"
                                            IsAssigned="@(issue.AppUserId == userId)"
                                            IsPendingReview=@CheckIfPendingReview(issue.ProjectId)
                                            OnAssignCallBack=@(() => AssignMyself(issue))
                                            OnSubmitPullRequestCallBack="@(() => OpenSubmitProjectform(issue.ProjectId))" />
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback OnClickCallback { get; set; }

    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    [Inject] private IUserService UserService { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserActivityService ActivityService { get; set; }
    [Inject] private ICommunityService CommunityService { get; set; }

    private ApplicationUser user { get; set; }

    private List<Project> projects;
    private List<DashboardProject> userProjects;
    private List<CommunityIssue>? issuesToShow = new();
    private string userId = "";
    private bool submitProject = false;
    private bool projectSubmitted = false;
    private bool userAssigned = false;
    private bool createIssue = false;
    private bool isSubmittingIssue = false;
    private SubmitIssueForm submitIssueForm = new();
    private DashboardProject dashboardProject = new();
    private SubmitIssuePullRequestForm form = new();
    private Project PointOfSale = new Project();
    private Project AcademyV2 = new Project();

    protected override async Task OnInitializedAsync()
    {
        projects = ProjectHelper.GetProjects();

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        } else
        {
            var claims = AuthSate.User;
            userId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
            user = await UserService.GetUserById(userId);
            userProjects = await ProjectService.GetDetailedProjectsById(userId);

            issuesToShow = await CommunityService.GetAvailableIssuesForCommunityPage(userId);

            PointOfSale = projects.Single(x => x.Id == 54);
            AcademyV2 = projects.Single(x => x.Id == 87);
        }
    }

    private async Task AssignMyself(CommunityIssue issue)
    {
        await CommunityService.AssignUserToIssue(userId, issue);
        user = await UserService.GetUserById(userId);

        userAssigned = true;
    }

    private bool CheckIfPendingReview(int id)
    {
        var project = userProjects.FirstOrDefault(x => x.ProjectId == id);
        bool result = project == null ? false : project.IsPendingReview;
        return result;
    }

    private async Task SubmitProject()
    {
        var project = new DashboardProject
            {
                AppUserId = user.Id,
                GithubUrl = form.GithubUrl,
                ProjectId = form.ProjectId,
                IsPendingReview = true,
                DateSubmitted = DateTimeOffset.UtcNow,
            };

        var result = await CommunityService.PostIssue(project, userId, isCommunityProject: true);

        if (result > 0)
        {
            projectSubmitted = true;
            submitProject = false;

            await ActivityService.PostUserActivity(new AppUserActivity
                {
                    ProjectId = project.ProjectId,
                    AppUserId = userId,
                    DateSubmitted = DateTimeOffset.UtcNow,
                    ActivityType = ActivityType.IssueSubmitted
                });
        }

        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task SubmitIssue()
    {
        isSubmittingIssue = true; 

        var communityIssue = new CommunityIssue
        {
            Title = submitIssueForm.Title,
            AppUserId = user.Id,
            GithubUrl = submitIssueForm.GithubUrl,
            CommunityProjectId = submitIssueForm.CommunityProjectId,
            Type = submitIssueForm.Type,
            IconUrl = "",
            ExperiencePoints = 20,
            IsClosed = false
        };

        await CommunityService.CreateIssue(communityIssue);

        NavigationManager.NavigateTo("/dashboard/community", forceLoad: true);
    }

    private void OpenSubmitProjectform(int projectId)
    {
        submitProject = true;
        form.ProjectId = projectId;
    }
    private void CloseSubmitProjectForm() => submitProject = false;
    private void ToggleSubmitIssue() => createIssue = !createIssue;
    private void DismissProjectSubmitted() => projectSubmitted = false;
    private void DismissUserAssigned() => userAssigned = false;
}

<style>
    .modal-dialog {
        margin-top: 100px;
        max-width: 750px;
    }

    .issues-col {
        padding: 2px !important
    }

    .horizontal-card{
        background-color: var(--card-background-color);
    }
</style>