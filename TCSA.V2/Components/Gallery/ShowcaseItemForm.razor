@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Data
@using TCSA.V2.Models.DTO
@using TCSA.V2.Models.Forms
@using TCSA.V2.Models.Responses
@using TCSA.V2.Services

<EditForm Model="@Model" OnValidSubmit="SubmitProject" FormName="SubmitShowCaseItemForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputSelect shadow rounded @bind-Value="Model.ProjectId" class="form-select w-50">
        <option disabled value="0" selected>Select Project</option>
        @foreach (var project in Projects)
        {
            <option value="@project.Id">@project.Area - @project.Title</option>
        }
    </InputSelect>
    <div class="form-floating mt-1">
        <InputText id="videourl" class="form-control w-50" @bind-Value="Model.VideoUrl" />
        <label for="githubUrl">Video Url</label>
    </div>
    <div class="form-floating mt-1">
        <InputText id="githubUrl" class="form-control w-50" @bind-Value="Model.GithubUrl" />
        <label for="githubUrl">Github Url</label>
    </div>
    @if (!IsSubmitting)
    {
        <button class="btn btn-success btn-academy mt-1" type="submit">Submit</button>
    } else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
    }

</EditForm>


@code {
    [SupplyParameterFromForm] public SubmitShowCaseItemForm Model { get; set; } = new();
    [Parameter] public EventCallback<BaseResponse<ShowcaseItemDTO>> OnAddNewItem { get; set; } = new();
    [Parameter] public ApplicationUser CurrentUser { get; set; } = new();
    [Parameter] public IEnumerable<ShowcaseProjectInfo> Projects { get; set; }
    [Parameter] public bool IsLightMode { get; set; } = false;
    [Inject] private IGalleryService GalleryService { get; set; }

    private bool IsSubmitDisabled { get; set; } = true; 
    private string ValidationMessage { get; set; }
    private bool IsSubmitting { get; set; } = false;

    private async Task SubmitProject()
    {
        IsSubmitting = true;

        var newItem = new ShowcaseItemDTO
            {
                ApplicationUserId = CurrentUser.Id,
                DashboardProjectId = CurrentUser.DashboardProjects.First(x => x.ProjectId == Model.ProjectId).Id,
                ProjectId = Model.ProjectId,
                VideoUrl = GalleryHelpers.GalleryVideoUrlFormatter(Model.VideoUrl),
                GithubUrl = Model.GithubUrl
            };


        var response = await GalleryService.AddItem(newItem);

        await OnAddNewItem.InvokeAsync(response);
    }
}
