@page "/dashboard/submit-project"
@using TCSA.V2.Components.Dashboard.Shared
@layout DashboardLayout
@rendermode InteractiveServer

@using System.Security.Claims;
@using TCSA.V2.Components.UI
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.Forms
@using TCSA.V2.Services

<PageTitle>@StringConstants.PageTitle - Submit Project</PageTitle>

@if (IsProjectSubmittedMessageShowing)
{
    @if (!IsSubmissionSuccessful && IsPendingReview)
    {
        <div class="mt-5 pt-5">
            <div class="card submit-project-card bg-danger">
                <div class="card-body">
                    This project has been submitted and is pending review.
                </div>
            </div>
            <EditForm Model="@Model" OnValidSubmit="UpdateUrl" FormName="SubmitProjectForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-floating mt-1">
                    <InputText id="githubUrl" class="form-control" @bind-Value="Model.GithubUrl" />
                    <label for="githubUrl">Pull Request Url</label>
                </div>

                @if (IsSubmitting)
                {
                    <LoadingSpinner />
                }
                else
                {
                    <button class="btn btn-outline-secondary mt-1" type="submit">Update GitHubUrl</button>
                }

            </EditForm>
        </div>
    }
    else if(IsSubmissionSuccessful)
    {
        <div class="mt-5 pt-5">
            <div class="card submit-project-card bg-success">
                <div class="card-body">
                    Your project has been submitted for review.
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="mt-5 pt-5">
            <div class="card submit-project-card bg-danger">
                <div class="card-body">
                    This Project has been marked as completed
                </div>
            </div>
        </div>
    }

} 
else
{
    <div class="mt-5 pt-5">
        <div class="card submit-project-warning-card bg-warning">
            <div class="card-body">
                If this is your first time submitting a project, please read <a target="_blank" href="https://thecsharpacademy.com/article/52/code-reviews">this article on how to submit a pull request</a>.
            </div>
        </div>
    </div>

    <div class="form-group mt-2">
        <EditForm Model="@Model" OnValidSubmit="Submit" FormName="SubmitProjectForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputSelect shadow rounded @bind-Value="Model.ProjectId" class="form-select">
                <option selected>Select Project</option>
                @foreach (var project in ProjectsNotCompleted)
                {
                    <option value="@project.Id">@project.Area - @project.Title</option>
                }
            </InputSelect>

            <div class="form-floating mt-1">
                <InputText id="githubUrl" class="form-control" @bind-Value="Model.GithubUrl" />
                <label for="githubUrl">Pull Request Url</label>
            </div>

            @if (IsSubmitting)
            {
                <LoadingSpinner />
            }
            else
            {
                <button class="btn btn-outline-secondary mt-1" type="submit">Submit</button>
            }
        </EditForm>
    </div>
}

@code {
    [SupplyParameterFromForm] public SubmitProjectForm Model { get; set; }

    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserActivityService ActivityService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private List<int> DashboardProjects;
    private List<Project> ProjectsNotCompleted = new();

    private bool IsSubmitting;
    private bool IsProjectSubmittedMessageShowing;
    private bool IsPendingReview;
    private bool IsSubmissionSuccessful;
    private string ResultMessage;
    private string UserId;

    protected async override Task OnInitializedAsync()
    {
        Model ??= new();

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        }

        var nonReviewProjects = new[] { 54, 70, 71, 76, 77, 78, 85, 87 };

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
            DashboardProjects = await ProjectService.GetCompletedProjectsById(UserId);

            ProjectsNotCompleted = ProjectHelper.GetProjects()
            .Where(x => !DashboardProjects.Contains(x.Id))
            .Where(x => !nonReviewProjects.Contains(x.Id))
            .ToList();
        }
    }
    private async Task UpdateUrl()
    {
        IsSubmitting = true;

        var dashboardProject = new DashboardProject
            {
                DateSubmitted = DateTime.UtcNow,
                IsPendingReview = true,
                AppUserId = UserId,
                ProjectId = Model.ProjectId,
                GithubUrl = Model.GithubUrl
            };

        var response = await ProjectService.UpdateArticle(dashboardProject);

        if (response == 1)
        {
            ResultMessage = "Your project was submitted successfuly";
            IsSubmissionSuccessful = true;
        }
        else
        {
            ResultMessage = "There was an error when submitting your project";
        }

        IsProjectSubmittedMessageShowing = true;
        IsSubmitting = false;
    }

    private async Task Submit()
    {
        IsSubmitting = true;

        var dashboardProject = new DashboardProject
            {
                DateSubmitted = DateTime.UtcNow,
                IsPendingReview = true,
                AppUserId = UserId,
                ProjectId = Model.ProjectId,
                GithubUrl = Model.GithubUrl
            };

        var response = await ProjectService.PostArticle(dashboardProject);

        if (response == 1)
        {
            ResultMessage = "Your project was submitted successfuly";
            IsSubmissionSuccessful = true;

            await ActivityService.PostUserActivity(new AppUserActivity
                {
                    ProjectId = Model.ProjectId,
                    AppUserId = UserId,
                    DateSubmitted = DateTimeOffset.UtcNow,
                    ActivityType = ActivityType.ProjectSubmitted
                });
        }
        else
        {
            ResultMessage = "There was an error when submitting your project";
        }

        IsPendingReview = await ProjectService.IsProjectPendingReview(UserId, Model.ProjectId);

        IsProjectSubmittedMessageShowing = true;
        IsSubmitting = false;
    }
}

<style>
    .submit-project-card {
        color: white;
        font-weight: 500;
    }
</style>