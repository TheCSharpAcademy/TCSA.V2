@page "/dashboard/activity"
@layout DashboardLayout

@using System.Security.Claims;
@using TCSA.V2.Components.Dashboard.Shared
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.DTO
@using TCSA.V2.Services

<div class="mt-5">
    @if (Activities != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Activity</th>
                    <th scope="col" class="xp-cell">XPs Gained</th>
                    <th scope="col" class="xp-cell">Total XPs</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in activityDisplay)
                {
                    <tr class="activity-row">
                        <td class="date-cell @UserActivityHelper.GetRowStyle(item.ActivityType)">
                            <div>
                                <b>@DateTimeHelper.GetDateForUserActivity(item.Date)</b>
                            </div>
                            <div class="day-of-the-week-cell">
                                <span class="day-of-the-week">@item.Date.DayOfWeek</span>
                            </div>
                        </td>
                        <td class="activity-cell">@item.Description</td>
                        <td class="activity-cell xp-cell">@item.ExperiencePoints</td>
                        <td class="activity-cell xp-cell">@item.CurrentExperiencePoints</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    [Inject] private IUserService UserService { get; set; }
    [Inject] private IUserActivityService ActivityService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }

    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private List<AppUserActivity>? Activities { get; set; } = null;
    private List<UserActivityDisplay>? activityDisplay { get; set; } = new();
    private List<Article>? Articles;
    private List<Project>? Projects;
    private List<int> issuesIds;
    private int InitialXP;

    protected override async Task OnInitializedAsync()
    {
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        }

        Projects = ProjectHelper.GetProjects();
        Articles = ArticleHelper.GetArticles();
        issuesIds = await CommunityService.GetIssuesIds();

        var claims = AuthSate.User;
        var userId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

        Activities = await ActivityService.GetActivityById(userId);

        InitialXP = await UserService.GetCurrentXPs(userId);

        await GetActivityDisplay();
    }

    private async Task GetActivityDisplay()
    {
        var currentXP = InitialXP;

        foreach (var item in Activities)
        {
            var communityIssue = new CommunityIssue();

            if (Activities != null)
            {
                if (issuesIds.Contains(item.ProjectId))
                {
                    communityIssue = await CommunityService.GetIssueByProjectId(item.ProjectId);
                }

                var experiencePoints = GetXPs(item, communityIssue);

                activityDisplay.Add(new UserActivityDisplay
                    {
                        Date = item.DateSubmitted,
                        Description = await GetDescriptionMarkup(item, item.AppUserId, communityIssue),
                        ExperiencePoints = GetXPs(item, communityIssue),
                        CurrentExperiencePoints = currentXP,
                        AppUserId = item.AppUserId,
                        ActivityType = item.ActivityType
                    });

                currentXP -= experiencePoints;
            }
        }
    }

    public int GetXPs(AppUserActivity item, CommunityIssue? issue = null)
    {
        if (item.ActivityType == ActivityType.ProjectSubmitted || item.ActivityType == ActivityType.IssueSubmitted)
        {
            return 0;
        }

        if (issuesIds.Contains(item.ProjectId))
        {
            return issue.ExperiencePoints;
        }
        else if (item.ActivityType == ActivityType.ArticleRead)
        {
            return ArticleHelper.GetArticles().Single(x => x.Id == item.ProjectId).ExperiencePoints;
        }

        return ProjectHelper.GetProjects().Single(x => x.Id == item.ProjectId).ExperiencePoints;
    }

    private async Task<MarkupString> GetDescriptionMarkup(AppUserActivity item, string userId, CommunityIssue? issue = null)
    {
        var description = GetDescription(item, issue);
        return new MarkupString(description);
    }

    public string GetDescription(AppUserActivity item, CommunityIssue? issue = null)
    {
        switch (item.ActivityType)
        {
            case ActivityType.ArticleRead:
                return $"You read the article <b>{ArticleHelper.GetArticles().Single(x => x.Id == item.ProjectId).Title}</b>";
            case ActivityType.ProjectSubmitted:
                return $"You submitted the project <b>{ProjectHelper.GetProjects().Single(x => x.Id == item.ProjectId).Title}</b> for review.";
            case ActivityType.IssueSubmitted:
                return $"You submitted the issue <b>{issue.Title}</b> for review.";
            case ActivityType.ProjectCompleted:
                return GetTitle(item, issue);
            case ActivityType.CodeReviewCompleted:
                return $"You've finished a code review for a <b>{ProjectHelper.GetProjects().Single(x => x.Id == item.ProjectId).Title}</b> project.";
            default:
                return "";
        }
    }

    public string GetTitle(AppUserActivity item, CommunityIssue? issue = null)
    {
        if (issuesIds.Contains(item.ProjectId))
        {
            return $"The open source ticket <b>{issue.Title}</b> was marked as complete.";
        }

        return $"The project <b>{ProjectHelper.GetProjects().Single(x => x.Id == item.ProjectId).Title}</b> was marked as complete.";
    }
}

<style>
    .article-read {
        color: white;
        background-color: green !important;
    }

    .project-submitted {
        background-color: gold !important;
    }

    .project-completed {
        background-color: navy !important;
        color: white;
    }

    .issue-submitted {
        background-color: orangered !important;
        color: white;
    }

    .review-completed {
        background-color: purple !important;
        color: white;
    }

    .modal-dialog {
        margin-top: 100px;
        max-width: 1000px;
    }

    .day-of-the-week {
        font-size: 14px;
    }

    .day-of-the-week-cell {
        margin-top: -5px;
    }

    .activity-cell {
        vertical-align: middle;
    }

    .xp-cell {
        vertical-align: middle;
        text-align: center;
        font-weight: 500;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 4px;
    }

    .date-cell {
        width: 20%;
        border: none;
    }

    .xp-cell {
        width: 10% !important;
    }

    td {
        border: none;
    }

    th {
        border: none;
    }

    .activity-row {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.9);
        margin: 1px 0;
    }

</style>