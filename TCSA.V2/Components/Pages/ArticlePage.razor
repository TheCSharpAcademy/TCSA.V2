@page "/article/{ArticleId:int}/{ArticleSlug}"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

@using System.Security.Claims;
@using TCSA.V2.Components.UI
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Services

@{
    int blockIndex = 0; 
}

<PageTitle>@StringConstants.PageTitle - @Article.Title</PageTitle>

<div class="container">
    <div class="jumbotron jumbotron-fluid project-banner">
        <div class="container text-center align-content-center">
            <h1 class="page-title">@Article.Title</h1>
        </div>
    </div>
</div>

<div class="container w-50 article-blocks-desktop">
    @if (IsLoggedIn && IsCompleted)
    {
        <div class="card card-completed">
            <div class="card-body">
                You have completed this roadmap step.
            </div>
        </div>
    }
    @foreach (var block in Article.Blocks)
    {
        @if (blockIndex == 1)
        {
            <div class="row mt-3 mb-3">
                <div class="col">
                    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4831088216810061"
                            crossorigin="anonymous"></script>
                    <ins class="adsbygoogle"
                         style="display:block; text-align:center;"
                         data-ad-layout="in-article"
                         data-ad-format="fluid"
                         data-ad-client="ca-pub-4831088216810061"
                         data-ad-slot="5921700737"></ins>
                    <script>
                        (adsbygoogle = window.adsbygoogle || []).push({});
                    </script>
                </div>
            </div>
        }
        @if (blockIndex == 4)
        {
            <div class="row mt-3 mb-3">
                <div class="col">
                    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4831088216810061"
                            crossorigin="anonymous"></script>
                    <ins class="adsbygoogle"
                         style="display:block; text-align:center;"
                         data-ad-layout="in-article"
                         data-ad-format="fluid"
                         data-ad-client="ca-pub-4831088216810061"
                         data-ad-slot="9815857489"></ins>
                    <script>
                        (adsbygoogle = window.adsbygoogle || []).push({});
                    </script>
                </div>
            </div>
        }
        <div class="row pb-4">
            @if (!String.IsNullOrEmpty(block.ImgUrl))
            {
                <div class="col-lg-2 d-flex align-items-center justify-content-center mt-sm-2">
                    <img src="img/@block.ImgUrl" width="70" alt="" class="align-middle">
                </div>
            }
            @if (!String.IsNullOrEmpty(block.BookImgUrl))
            {
                <div class="col-lg-3 d-flex align-items-center justify-content-center mt-sm-2">
                    <img src="img/@block.BookImgUrl" width="150" height="220" alt="" class="align-middle">
                </div>
            }
            <div class="@(!String.IsNullOrEmpty(block.ImgUrl) ? "col-lg-10" : "col")">
                <div class="d-flex">
                    <h1 class="article-section-title">@block.Title</h1>
                </div>

                @foreach (var paragraph in block.Paragraphs)
                {
                    if (paragraph.IsPicture)
                    {
                        <div class="d-flex justify-content-center photo-paragraph mt-1 mb-1">
                            <img src="img/@paragraph.PictureUrl" class="img-fluid" />
                        </div>
                    }

                    if (paragraph.IsVideo)
                    {
                        <div class="video-paragraph d-flex mt-3 mb-4 justify-content-center embed-responsive embed-responsive-16by9">
                            <iframe class="embed-responsive-item" width="500" height="350" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                        </div>
                    }

                    if (paragraph.IsCode)
                    {
                        <pre><code class="language-csharp">@((MarkupString)paragraph.Body)</code></pre>
                    } 
                    else
                    {
                        if (!String.IsNullOrEmpty(paragraph.Body))
                        {
                            <br>
                            <p>@((MarkupString)(paragraph.Body))</p>
                        }
                    }
                }
            </div>
        </div>
        blockIndex++;
    }

    @if (Article.Area != Area.Blog)
    {
        @if (IsLoggedIn)
        {
            @if (!IsCompleted)
            {
                <p>If you're following the roadmap, mark this article as read before moving to the next.</p>
                <div class="user-buttons mt-3">
                    @if (IsLoading)
                    {
                        <LoadingSpinner />
                    }
                    else
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="MarkAsRead" disabled="@IsLoading">Mark As Read</button>
                    }
                </div>
                <br />
                <p class="projects-worth">This article is worth @Article.ExperiencePoints XPs </p>
            }
            else
            {
                <div class="card card-completed">
                    <div class="card-body">
                        You have completed this roadmap step.
                    </div>
                </div>
            }
        }
        else
        {
            <div class="card">
                <div class="card-body">
                    Log in to mark this article as read and save your progress.
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(@Article.NextSlug))
        {
            <div class="w-100 d-flex align-items-center justify-content-center mt-2">
                <NextButton Href="@Article.NextSlug" />
            </div>
        }
    }
</div>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private IUserActivityService ActivityService { get; set; }

    [Parameter] public string ArticleSlug { get; set; }
    [Parameter] public int ArticleId { get; set; }

    private Article Article { get; set; }

    private bool IsLoggedIn;
    private bool HasNext;
    private bool IsCompleted;
    private bool IsLoading;
    private bool Toast;
    private string UserId;
    private string BackgroundImage;
    private string ResultMessage;

    protected async override Task OnInitializedAsync()
    {
        await OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JS function to highlight the code after rendering
            await JSRuntime.InvokeVoidAsync("highlightCode");
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        Article = ArticleHelper.GetArticles().Single(x => x.Id == ArticleId);
        BackgroundImage = Article.BannerUrl != "" ? Article.BannerUrl : "article-banner.jpg";

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

            IsCompleted = await CheckIfProjectCompleted();
        }
    }

    private Task<bool> CheckIfProjectCompleted()
    {
        return ProjectService.IsProjectCompleted(UserId, ArticleId);
    }

    private async Task MarkAsRead()
    {
        IsLoading = true;

        var project = new DashboardProject
            {
                AppUserId = UserId,
                GithubUrl = "Not required",
                ProjectId = ArticleId,
                IsCompleted = true,
                DateSubmitted = DateTimeOffset.UtcNow
            };

        var response = await ProjectService.PostArticle(project);

        if (response == 1)
        {
            ResultMessage = "Your project was submitted successfuly";

            await ActivityService.PostUserActivity(new AppUserActivity
                {
                    ProjectId = Article.Id,
                    AppUserId = UserId,
                    DateSubmitted = DateTimeOffset.UtcNow,
                    ActivityType = ActivityType.ArticleRead
                });

            var currentPoints = await UserService.GetCurrentXPs(UserId);

            await UserService.AddExperiencePoints(UserId, Article.ExperiencePoints + currentPoints);
        }
        else
        {
            ResultMessage = "There was an error when submitting your project";
        }

        IsLoading = false;

        IsCompleted = await CheckIfProjectCompleted();

        if (IsCompleted)
        {
            Toast = true;
        }
    }
}

<style>
     .jumbotron {
        background-image: url("../img/banners/@BackgroundImage");
        background-position: center;
        background-size: cover;
        box-shadow: inset 0 0 0 2000px rgba(0, 0, 0, 0.4) !important;
    }

    .page-title {
        padding-top: 120px;
        height: 300px;
        color: white;
    }

    .card-completed {
        background-color: green;
        color: white;
        margin-bottom: 20px;
    }
</style>
