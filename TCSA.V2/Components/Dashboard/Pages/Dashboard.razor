@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using TCSA.V2.Components.Dashboard.Shared
@using TCSA.V2.Components.UI
@using TCSA.V2.Components.UI.SVGs
@using TCSA.V2.Data
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Services
@using System.Security.Claims;
@attribute [AllowAnonymous]

@layout DashboardLayout
@rendermode InteractiveServer

<PageTitle>@StringConstants.PageTitle - Dashboard</PageTitle>

<div class="pt-lg-5 mt-lg-2">
    @if (IsLoggedIn && User != null)
    {
        @if (ShowBeltNotification)
        {
            <BeltNotificationModal BeltColor="@User.Level" BeltImageUrl="@($"/img/Belts/{User.Level}-belt.png")" ShowModal="true" OnClose="HandleModalClose" />
        }

        if (User.DashboardProjects != null && User.DashboardProjects.Any(x => x.IsPendingNotification))
        {
            foreach (var project in CompletedPendingNotificationProjects)
            {
                <div class="card card-completed">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-10 d-flex align-items-center">@GetProjectName(project) was marked as complete!</div>
                            <div class="col-2">
                                @if (IsLoading)
                                {
                                    <LoadingSpinner />
                                }
                                else
                                {
                                    <button class="btn btn-outline-light" type="button" @onclick="() => DismissIsCompleteNotification(project)">Dismiss</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        <DashboardHeader Level=@User.Level
                         BeltImgUrl=@($"/img/Belts/{User.Level}-belt.png")
                         FlagUrl=@FlagHelper.GetFlag(User.Country)
                         ExperiencePoints=@User.ExperiencePoints
                         Ranking=@Ranking
                         DisplayName=@(User.DisplayName ?? User.FirstName ?? User.Email) />
        
        <div class="my-3 w-100 d-flex align-items-center justify-content-start gap-2">
            <ToggleCompletedButton OnToggle="ToggleCompletedArea" Name="Completed Area" Active="false" />
            <ToggleCompletedButton OnToggle="TogglePendingProjects" Name="Pending Projects" Active=!IsPendingProjectButtonClicked />
            <ToggleCompletedButton OnToggle="ToggleCompletedProjects" Name="Completed Projects" Active=!IsCompletedProjectButtonClicked />
        </div>


        <div class="row">
            @if (!AlumniComplete)
            {
                <div class="col-12 m-1 pe-4 mt-1">
                <DashboardAreaCard CardName="LinkedIn"
                                   IconUrl="icons8-student-512.png"
                                   HasButton="false"
                                   Description="<a target='_blank' href='project/86/linkedin'>Mark yourself as a student of The C# Academy on LinkedIn</a> and get 20XPs" />
                </div>

            }

            @if (!OOPCompleted)
            {
                <div class="col-12 m-1 pe-4 mt-1">
                    <DashboardAreaCard CardName="Intro to Object Oriented Programming"
                                       HasButton="false"
                                       IconUrl="icons8-architecture-64.png"
                                       Description="<a target='_blank' href='course/1/article/1/500000/false'>Check out our brand new crash course!</a> and get 20XPs"
                                       Tasks=@OOPTasks/>

            </div>
            }

            @if(State == Enums.DashboardState.Area)
            {
                @foreach (var area in Areas.Where(a => !a.IsHidden))
                {
                    <div class="col-lg-6 col-md-12 col-sm-12 my-1 dashboard-area-card">
                        <DashboardAreaCard CardName=@area.CardName
                                           IsComplete=@area.IsCompleted
                                           IconUrl=@area.ImgUrl
                                           Description=@area.Description
                                           Projects="@area.Projects"
                                           PendingProjects="@PendingProjects"
                                           CompleteProjects="@CompletedProjects" />
                    </div>
                }
            }
            else if(State == Enums.DashboardState.Pending)
            {
                @foreach (var project in DashboardHelper.GetPendingProjects(Projects, PendingProjects))
                {
                    <div class="col-lg-6 col-md-12 col-sm-12">
                        <DashboardProjectCard Project="project" Status="pending-review" />
                    </div>
                }
            }
            else if(State == Enums.DashboardState.Completed)
            {
                @foreach (var project in DashboardHelper.GetCompletedProjects(Projects, CompletedProjects))
                {
                    <div class="col-lg-6 col-md-12 col-sm-12">
                        <DashboardProjectCard Project="project" Status="completed" />
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="row mt-5 pt-5">
            <div class="col">
                <p>You Need to be logged in to view this page.</p>
            </div>
        </div>
    }
</div>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private ILeaderboardService LeaderboardService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private ICommunityService CommunityService { get; set; }

    private ApplicationUser User;
    private string UserId;
    private bool AlumniComplete = false;
    private bool IsLoading = false;
    private bool IsLoggedIn = false;
    private bool ShowBeltNotification = false;
    private bool OOPCompleted = false;
    private Enums.DashboardState State = Enums.DashboardState.Area;
    private int Ranking;
    private bool IsPendingProjectButtonClicked = false;
    private bool IsCompletedProjectButtonClicked = false;
    private string OOPTasks;
    private List<DashboardAreaInfo> Areas = new();
    private List<Article>? Articles;
    private IEnumerable<Project> Projects;
    private List<int>? CompletedProjects = new();
    private List<int>? PendingProjects = new();
    private List<int>? CompletedPendingNotificationProjects = new();
    private Dictionary<int, string>? CompletedPendingNotificationIssues = new();

    protected async override Task OnInitializedAsync()
    {
        Articles = ArticleHelper.GetArticles().ToList();
        Projects = ProjectHelper.GetProjects().Where(x => x.IsClosed == false);
        var courseArticles = CourseHelper.GetCourses().Where(x => x.Id == 1).SelectMany(x => x.Articles).ToList();
        Articles.AddRange(courseArticles);
        var courseArticleIds = courseArticles.Select(x => x.Id).ToArray();

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
        else
        {
            return;
        }

        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);
        CompletedProjects = User?.DashboardProjects?.Where(x => x.IsCompleted).Select(x => x.ProjectId).ToList();
        PendingProjects = User?.DashboardProjects?.Where(x => x.IsPendingReview).Select(x => x.ProjectId).ToList();
        CompletedPendingNotificationProjects = User?.DashboardProjects?.Where(x => x.IsPendingNotification).Select(x => x.ProjectId).ToList();
        CompletedPendingNotificationIssues = await CommunityService.GetIssuesTitles(CompletedPendingNotificationProjects);

        var incompleteOopIds = courseArticleIds
    .Where(x => !CompletedProjects.Contains(x))
    .ToList();

        OOPTasks = $"You've completed <b>{courseArticleIds.Count() - incompleteOopIds.Count()} out of {courseArticleIds.Count()}</b> chapters.";

        OOPCompleted = incompleteOopIds.Count == 0;

        var areaIconUrls = new List<string> { "" };

        Ranking = await LeaderboardService.GetUserRanking(UserId);

        ShowBeltNotification = User?.HasPendingBeltNotification ?? false;

        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Start Here",
                ImgUrl = "icons8-baby-app-96.png",
                Projects = Articles.Where(x => x.Area == Area.StartHere),
                Description = GetNotCompletedMessage(Area.StartHere, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles, 
                    CompletedProjects, Area.StartHere, null),
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Beginner Console",
                ImgUrl = "icons8-mommy-and-me-classes-96.png",
                Projects = Projects.Where(x => x.Area == Area.Console && x.Difficulty == Difficulty.Beginner),
                Description = GetNotCompletedMessage(Area.Console, Difficulty.Beginner),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Console, Difficulty.Beginner),
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Intermediate Console",
                ImgUrl = "icons8-teenager-64.png",
                Projects = Projects.Where(x => x.Area == Area.Console && x.Difficulty == Difficulty.Intermediate),
                Description = GetNotCompletedMessage(Area.Console, Difficulty.Intermediate),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Console, Difficulty.Intermediate)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Advanced Console",
                ImgUrl = "icons8-executive-64.png",
                Projects = Projects.Where(x => x.Area == Area.Console && x.Difficulty == Difficulty.Advanced),
                Description = GetNotCompletedMessage(Area.Console, Difficulty.Advanced),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Console, Difficulty.Advanced)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Start Applying",
                ImgUrl = "icons8-permanent-job-96.png",
                Projects = Projects.Where(x => x.Area == Area.StartApplying),
                Description = GetNotCompletedMessage(Area.StartApplying, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.StartApplying, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "SQL",
                ImgUrl = "icons8-sql-server-64.png",
                Projects = Projects.Where(x => x.Area == Area.SQL),
                Description = GetNotCompletedMessage(Area.SQL, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.SQL, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "ASP.NET Core MVC",
                ImgUrl = "mvc.png",
                Projects = Projects.Where(x => x.Area == Area.MVC),
                Description = GetNotCompletedMessage(Area.MVC, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.MVC, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Auth Area",
                ImgUrl = "icons8-authentication-100.png",
                Projects = Projects.Where(x => x.Area == Area.Auth),
                Description = GetNotCompletedMessage(Area.Auth, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Auth, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "React",
                ImgUrl = "icons8-react-80.png",
                Projects = Projects.Where(x => x.Area == Area.React),
                Description = GetNotCompletedMessage(Area.React, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.React, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Angular",
                ImgUrl = "icons8-angularjs-96.png",
                Projects = Projects.Where(x => x.Area == Area.Angular),
                Description = GetNotCompletedMessage(Area.Angular, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Angular, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Blazor",
                ImgUrl = "blazor.png",
                Projects = Projects.Where(x => x.Area == Area.Blazor),
                Description = GetNotCompletedMessage(Area.Blazor, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Blazor, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "MAUI",
                ImgUrl = "maui.png",
                Projects = Projects.Where(x => x.Area == Area.MAUI),
                Description = GetNotCompletedMessage(Area.MAUI, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.MAUI, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Cloud Development",
                ImgUrl = "icons8-cloud-connection-480.png",
                Projects = Projects.Where(x => x.Area == Area.Azure),
                Description = GetNotCompletedMessage(Area.Azure, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles,
                        CompletedProjects, Area.Azure, null)
            });
        Areas.Add(new DashboardAreaInfo
            {
                CardName = "Challenge Projects",
                ImgUrl = "icons8-challenge-64.png",
                Projects = Projects.Where(x => x.Area == Area.MonthlyChallenge),
                Description = GetNotCompletedMessage(Area.MonthlyChallenge, null),
                IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles, 
                    CompletedProjects, Area.MonthlyChallenge, null)
            });
        Areas.Add(new DashboardAreaInfo
        {
            CardName = "Flagship Project",
            ImgUrl = "flagship.png",
            Projects = Projects.Where(x => x.Area == Area.GraduationProject).Take(1),
            Description = GetNotCompletedMessage(Area.GraduationProject, null),
            IsCompleted = DashboardHelper.CheckIfAreaIsCompleted(Projects, Articles, CompletedProjects, Area.GraduationProject, null)
        });

        AlumniComplete = CompletedProjects != null && CompletedProjects.Contains(86);
    }

    private string GetNotCompletedMessage(Area? area, Difficulty? difficulty)
    {
        var count = 0;
        var completedProjects = 0;
        List<int> ids = new();

        if (area == Area.StartHere)
        {
            count = Articles.Where(x => x.Area == area).Count();
            ids = Articles.Where(x => x.Area == area).Select(x => x.Id).ToList();

            foreach (int id in ids)
            {
                if (CompletedProjects != null && CompletedProjects.Contains(id))
                {
                    completedProjects += 1;
                }
            }
        }

        else if (area == Area.SQL)
        {
            count = Projects.Where(x => x.Area == Area.SQL && !x.IsClosed).Count();
            ids = Projects.Where(x => x.Area == Area.SQL).Select(x => x.Id).ToList();

            foreach (int id in ids)
            {
                if (CompletedProjects != null && CompletedProjects.Contains(id))
                {
                    completedProjects += 1;
                }
            }
        } else if (area == Area.GraduationProject)
        {
            count = 1;
            ids = Projects.Where(x => x.Area == Area.GraduationProject).Select(x => x.Id).ToList();
        }
        else
        {
            if (difficulty != null)
            {
                count = Projects.Where(x => x.Area == area && x.Difficulty == difficulty).Count();
                ids = Projects.Where(x => x.Area == area && x.Difficulty == difficulty).Select(x => x.Id).ToList();
            }
            else
            {
                count = Projects.Where(x => x.Area == area).Count();
                ids = Projects.Where(x => x.Area == area).Select(x => x.Id).ToList();
            }

            foreach (int id in ids)
            {
                if (CompletedProjects != null && CompletedProjects.Contains(id))
                {
                    completedProjects += 1;
                }
            }
        }

        return $"{completedProjects} out of {count} tasks completed";
    }

    private async Task DismissIsCompleteNotification(int projectId)
    {
        await ProjectService.MarkAsNotified(projectId);
        User = await UserService.GetUserById(UserId);
    }

    private string GetProjectName(int projectId)
    {
        if (Projects.Any(x => x.Id == projectId))
        {
            return Projects.FirstOrDefault(x => x.Id == projectId).Title;
        }
        else
        {
            return CompletedPendingNotificationIssues.FirstOrDefault(x => x.Key == projectId).Value;
        }
    }

    private async void HandleModalClose()
    {
        ShowBeltNotification = false;
        await UserService.DismissBeltNotification(User.Id);
    }

    public void ToggleCompletedArea()
    {
        State = Enums.DashboardState.Area;
        foreach (var area in Areas.Where(area => area.IsCompleted))
        {
            area.IsHidden = !area.IsHidden;
        }
        if (IsCompletedProjectButtonClicked)
        {
            IsCompletedProjectButtonClicked = !IsCompletedProjectButtonClicked;
        }
        if (IsPendingProjectButtonClicked)
        {
            IsPendingProjectButtonClicked = !IsPendingProjectButtonClicked;
        }
    }
    public void TogglePendingProjects()
    {
        IsPendingProjectButtonClicked = !IsPendingProjectButtonClicked;
        if (IsCompletedProjectButtonClicked)
        {
            IsCompletedProjectButtonClicked = !IsCompletedProjectButtonClicked;
        }
        State = IsPendingProjectButtonClicked ? Enums.DashboardState.Pending : Enums.DashboardState.Area;

    }

    public void ToggleCompletedProjects()
    {
        IsCompletedProjectButtonClicked = !IsCompletedProjectButtonClicked;
        if (IsPendingProjectButtonClicked)
        {
            IsPendingProjectButtonClicked = !IsPendingProjectButtonClicked;
        }
        State = IsCompletedProjectButtonClicked ? Enums.DashboardState.Completed : Enums.DashboardState.Area;

    }
}

<style>
    .dashboard-area-card {
        margin-top: 8px;
        padding-right: 15px;
        padding-left: 15px;
    }
</style>