@page "/admin"
@using Microsoft.AspNetCore.Authorization
@using TCSA.V2.Helpers
@using TCSA.V2.Models
@using TCSA.V2.Models.DTO
@using TCSA.V2.Services
@layout AdminLayout
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<div class="dashboard-content-wrapper col-md-8 col-lg-8 col-sm-12">

    <h1>Completed Projects: <b>@completedCount</b></h1>

    @if (activity != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">Time</th>
                    <th scope="col">Activity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in activityDisplay)
                {
                    <tr>
                        <td>@item.Date</td>
                        <td>@item.Time</td>
                        <td>@item.Description</td>
                        <td><a class="btn btn-success btn-side" href=@($"admin/{item.AppUserId}")>View</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }

</div>

@code {
    [Inject] protected IUserService UserService { get; set; }
    [Inject] protected IUserActivityService ActivityService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }

    [Inject] public AuthenticationStateProvider AuthenticationState { get; set; }

    private List<AppUserActivity>? activity { get; set; } = null;
    private List<UserActivityAdminDisplay>? activityDisplay { get; set; } = new();
    private List<Article>? articles;
    private List<Project>? projects;
    private List<int> issuesIds;

    private int userCount;
    private int articlesCount;
    private int reviewsCount;
    private int completedCount;

    protected override async Task OnInitializedAsync()
    {
        projects = ProjectHelper.GetProjects();
        articles = ArticleHelper.GetArticles();
        activity = await ActivityService.GetLatestActivity();
        userCount = await UserService.GetTodaysUserCount();
        issuesIds = await CommunityService.GetIssuesIds();

        var activityCount = await ActivityService.GetTodaysActivityCount();
        articlesCount = activityCount.Item1;
        reviewsCount = activityCount.Item2;
        completedCount = activityCount.Item3;

        await GetActivityDisplay();
    }

    private async Task GetActivityDisplay()
    {
        foreach (var item in activity)
        {
            activityDisplay.Add(new UserActivityAdminDisplay
            {
                Date = DateTimeHelper.GetDate((DateTimeOffset)item.DateSubmitted),
                Time = DateTimeHelper.GetTime((DateTimeOffset)item.DateSubmitted),
                Description = await GetDescriptionMarkup(item, item.AppUserId),
                AppUserId = item.AppUserId
            });
        }
    }

    private async Task<MarkupString> GetDescriptionMarkup(AppUserActivity item, string userId)
    {
        var description = await GetDescription(item, userId);
        return new MarkupString(description);
    }

    private async Task<string> GetDescription(AppUserActivity activity, string appUserId)
    {
        var communityIssue = new CommunityIssue();

        if (activity != null)
        {
            if (issuesIds.Contains(activity.ProjectId))
            {
                communityIssue = await CommunityService.GetIssueByProjectId(activity.ProjectId);
            }

            switch (activity.ActivityType)
            {
                case ActivityType.ArticleRead:
                    return $"<span class='activity-completed'>User {appUserId} marked <b>{articles.FirstOrDefault(x => x.Id == activity.ProjectId)?.Title}</b> as read.<span>";
                case ActivityType.ProjectSubmitted:
                    return $"<span class='activity-pending'>User {appUserId} submitted the Project <b>{projects.FirstOrDefault(x => x.Id == activity.ProjectId)?.Title}</b> for review.</span>";
                case ActivityType.IssueSubmitted:
                    return $"<span class='activity-pending'>User {appUserId} submitted the Issue <b>{communityIssue.Title}</b> for review.</span>";
                case ActivityType.ProjectCompleted:
                    return GetTitle(appUserId, activity.ProjectId, communityIssue);
                default:
                    return "";
            }
        }

        return "";
    }

    private string GetTitle(string appUserId, int projectId, CommunityIssue? communityIssue = null)
    {
        if (string.IsNullOrEmpty(projects.FirstOrDefault(x => x.Id == projectId)?.Title))
        {
            return $"<span class='project-completed'>You marked {appUserId}'s issue <b>{communityIssue.Title}</b> as complete.</span>";
        }

        return $"<span class='project-completed'>You marked {appUserId}'s project <b>{projects.FirstOrDefault(x => x.Id == projectId)?.Title}</b> as complete.</span>";
    }
}
