name: .NET - Continuous integration

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]

jobs:
  dotnet_continuous_integration:
    # Pinning to a specific Ubuntu version to have reproducible builds (at least, more than with ubuntu-latest)
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Setup .NET with the version defined in global.json
      uses: actions/setup-dotnet@v4.0.1
      with:
        # Cache NuGet packages, calculating their hash from `packages.lock.json` as part of the cache key
        cache: true
        cache-dependency-path: 'src/**/packages.lock.json'

    - name: Restore dependencies of the solution without updating `packages.lock.json`
      run: dotnet restore --locked-mode

    # TODO:
    #   To consistently enforce code format, we need a set of rules. As a start, this can be done with a EditorConfig file generated by `dotnet new editorconfig`
    # - name: Verify that all code of the solution is correctly formatted
    #   run: dotnet format --no-restore --verify-no-changes

    - name: Build the solution without restoring its dependencies
      run: dotnet build --no-restore

    # TODO:
    #   Running tests on anything other than Windows fail with `System.PlatformNotSupportedException : LocalDB is not supported on this platform.`
    #   To fix this, we should migrate to running SQL Server in Docker. This would be supported on Windows, Mac OS and Linux (which would work in the continuous integration here)
    # - name: Run tests for the solution without building it
    #   run: dotnet test --no-build --verbosity normal
